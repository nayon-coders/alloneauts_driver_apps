import 'package:cloud_firestore/cloud_firestore.dart';import 'package:driver/Firebase/notification_controller.dart';import 'package:driver/utilitys/app_const.dart';import 'package:driver/utilitys/colors.dart';import 'package:driver/view/home/screens/home.dart';import 'package:driver/view/notification/screens/notifiaction.dart';import 'package:driver/view/save_car/save_car.dart';import 'package:driver/view/setting/screens/settings.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:flutter/material.dart';import 'package:font_awesome_flutter/font_awesome_flutter.dart';import '../../../notification/local_nification.dart';import '../../permission_handler/permissoin_hendler.dart';class AppBottomNavigation extends StatefulWidget {  final int? pageIndex;  const AppBottomNavigation({Key? key, this.pageIndex = 0}) : super(key: key);  @override  State<AppBottomNavigation> createState() => _AppBottomNavigationState();}class _AppBottomNavigationState extends State<AppBottomNavigation> {  final GlobalKey<RefreshIndicatorState> _refreshIndicatorKey =  GlobalKey<RefreshIndicatorState>();  List<Widget> _page = [];  int _pageCount = 0;  List _totalNotificationCount = [];  @override  void initState() {    // TODO: implement initState    super.initState();    _pageCount = widget!.pageIndex!;    _page.insert(0, Home());    _page.insert(1, SaveCars());    _page.insert(2, MySettings());    //getNotificationCount();    //getNotificationCount();    if(FirebaseAuth.instance.currentUser != null){      FirebaseFirestore.instance.collection("notification").where("driverEmail", isEqualTo: FirebaseAuth.instance.currentUser!.email).get().then((value){        setState(() {          value.docs.forEach((element) {            if(element.data()["isRead"] != true){              _totalNotificationCount.add(element);            }          });        });      });    }    // 1. This method call when app in terminated state and you get a notification    // when you click on notification app open from terminated state and you can get notification data in this method    FirebaseMessaging.instance.getInitialMessage().then(          (message) {        print("FirebaseMessaging.instance.getInitialMessage");        if (message != null) {          print("New Notification");          // if (message.data['_id'] != null) {          //   Navigator.of(context).push(          //     MaterialPageRoute(          //       builder: (context) => DemoScreen(          //         id: message.data['_id'],          //       ),          //     ),          //   );          // }        }      },    );    // 2. This method only call when App in forground it mean app must be opened    FirebaseMessaging.onMessage.listen(          (message) {        print("FirebaseMessaging.onMessage.listen");        if (message.notification != null) {          print(message.notification!.title);          print(message.notification!.body);          print("message.data11 ${message.data}");          LocalNotificationService.createanddisplaynotification(message);        }      },    );    // 3. This method only call when App in background and not terminated(not closed)    FirebaseMessaging.onMessageOpenedApp.listen(          (message) {        print("FirebaseMessaging.onMessageOpenedApp.listen");        if (message.notification != null) {          print(message.notification!.title);          print(message.notification!.body);          print("message.data22 ${message.data['_id']}");        }      },    );  }  final _auth = FirebaseAuth.instance;  @override  Widget build(BuildContext context) {    var size = MediaQuery.of(context).size;    return Scaffold(      appBar: AppBar(        backgroundColor: AppColors.mainBg,        leading: Padding(          padding: const EdgeInsets.only(left: 20, top: 10, bottom: 10),          child: Image.asset(AppConst.app_logo, width: 100, height: 100,),        ),        elevation: 0.56,        leadingWidth: 100,        toolbarHeight: 60,        actions: [           InkWell(              onTap: ()=>Navigator.push(context, MaterialPageRoute(builder: (context)=>NotificationView())),              child: Container(            width: 50,            height: 30,            margin: EdgeInsets.only(top: 5, bottom: 5),            decoration: BoxDecoration(              color: AppColors.white,              borderRadius: BorderRadius.circular(100),              border: Border.all(width: 1, color: AppColors.grey200)            ),            child: Center(              child: SizedBox(                height: 30,                width: 40,                child: Stack(                  children: [                    Icon(Icons.notifications, size: 30, color: AppColors.black,),                    Positioned(                      top: 0, right: 0,                        child: Container(                      width: 20,                      height: 20,                      decoration: BoxDecoration(                          color: AppColors.red,                          borderRadius: BorderRadius.circular(100),                      ),                          child: Center(                            child: Text("${_totalNotificationCount.length}",                              style: TextStyle(                                color: AppColors.white,                                fontSize: 12                              ),                            ),                          ),                    ))                  ],                ),              ),            ),          )),          SizedBox(width: 10,),          InkWell(            onTap: ()=>Navigator.push(context, MaterialPageRoute(builder: (context)=>AppBottomNavigation(pageIndex: 2,))),              child: Container(            width: 50,            height: 30,            margin: EdgeInsets.only(top: 5, bottom: 5),            decoration: BoxDecoration(                color: AppColors.white,                borderRadius: BorderRadius.circular(100),                border: Border.all(width: 1, color: AppColors.grey200)            ),            child: Center(              child: Icon(Icons.person, size: 30, color: AppColors.black,),            ),          )),          SizedBox(width: 10,),        ],      ),      body: RefreshIndicator(          key: _refreshIndicatorKey,          color: Colors.white,          backgroundColor: Colors.blue,          strokeWidth: 4.0,          onRefresh: () async {            _totalNotificationCount = [];            //getNotificationCount();            FirebaseFirestore.instance.collection("notification").where("driverEmail", isEqualTo: _auth.currentUser!.email).get().then((value){              setState(() {                value.docs.forEach((element) {                  if(element.data()["isRead"] != true){                    _totalNotificationCount.add(element);                  }                });              });            });            setState(() {});          },          child: _page[_pageCount]      ),      bottomNavigationBar: Container(        width: size.width,        height: 70,        decoration: BoxDecoration(          color: AppColors.white,          borderRadius: BorderRadius.only(            topLeft: Radius.circular(30),            topRight: Radius.circular(30),          ),          boxShadow: [            BoxShadow(              color: Colors.grey.shade200,              offset: Offset(0,1),              blurRadius: 10,              spreadRadius: 4            )          ]        ),        child:  BottomNavigationBar(        type: BottomNavigationBarType.fixed,        unselectedItemColor:Colors.grey,        selectedItemColor: AppColors.mainColor,        currentIndex: _pageCount,        items: [          BottomNavigationBarItem(            icon: FaIcon(Icons.dashboard, size: 30,),            label: 'Home',          ),          BottomNavigationBarItem(            icon: FaIcon(Icons.favorite, size: 30,),            label: 'Save',          ),          BottomNavigationBarItem(            icon: Icon(Icons.settings),            label: 'Setting',          ),        ],          onTap: (index){            setState(() {              _pageCount = index;            });          },      ),      ),    );  }}