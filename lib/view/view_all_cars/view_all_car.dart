import 'package:driver/utilitys/colors.dart';import 'package:driver/view/home/widgets/all_car_home_view.dart';import 'package:driver/widgets/appButton.dart';import 'package:flutter/material.dart';import 'package:range_slider_flutter/range_slider_flutter.dart';class ViewAllCars extends StatefulWidget {  final bool isFiltterOpen;  const ViewAllCars({Key? key,  this.isFiltterOpen = false}) : super(key: key);  @override  State<ViewAllCars> createState() => _ViewAllCarsState();}class _ViewAllCarsState extends State<ViewAllCars> {  final _searchController = TextEditingController();  String? _searchValue = "";  final GlobalKey<RefreshIndicatorState> _refreshIndicatorKey =  GlobalKey<RefreshIndicatorState>();  //set bool for check box  bool _isDaily = false;  bool _isWeekly = false;  bool _isMonthly = false;  bool _isYearly = false;  //set null string  List _selectedRentType = [];  @override  void initState() {    // TODO: implement initState    super.initState();    if(widget.isFiltterOpen){      Future.delayed(Duration(milliseconds: 500), (){        showFilterDialog(context);      });    }  }  @override  Widget build(BuildContext context) {    var size = MediaQuery.of(context).size;    return Scaffold(      appBar: AppBar(        backgroundColor: const Color(0xffF3F3F3),        elevation: 0,        title: const Text("View All Car",          style: TextStyle(              color: AppColors.black,              fontSize: 19          ),        ),        leading: InkWell(            onTap: ()=>Navigator.pop(context),            child: Container(              width: 40,              height: 40,              margin: EdgeInsets.all(10),              decoration: BoxDecoration(                color: Color(0xffD9D9D9),                borderRadius: BorderRadius.circular(5),              ),              child: Center(                child: Icon(Icons.arrow_back, color: AppColors.black, size: 20,),              ),            )),        bottom: PreferredSize(          preferredSize: Size.fromHeight(60),          child: Container(              margin: EdgeInsets.only(left: 15, right: 15),              child: Row(                children: [                  Expanded(child: TextFormField(                    controller: _searchController,                    onChanged: (v){                      setState(() {                        _searchValue = v;                      });                    },                    decoration: InputDecoration(                        hintText: "Search your dream car",                        hintStyle: TextStyle(                            fontWeight: FontWeight.w400,                            color: Colors.grey,                            fontSize: 13                        ),                        fillColor: AppColors.white,                        filled: true,                        contentPadding: EdgeInsets.only(left: 10, right: 10),                        border: OutlineInputBorder(                            borderRadius: BorderRadius.circular(100),                            borderSide: BorderSide(width: 1, color: AppColors.grey200)                        ),                        enabledBorder: OutlineInputBorder(                            borderRadius: BorderRadius.circular(100),                            borderSide: BorderSide(width: 1, color: AppColors.grey200)                        ),                        focusedBorder: OutlineInputBorder(                            borderRadius: BorderRadius.circular(100),                            borderSide: BorderSide(width: 1, color: AppColors.grey200)                        ),                        prefixIcon: Icon(Icons.search, color: AppColors.grey200, size: 20,),                      suffixIcon: InkWell(                        onTap: (){                          _searchController.clear();                          setState(() {                            _searchValue = "";                          });                        },                        child: Icon(Icons.clear, color: AppColors.grey200, size: 20,),                    ),                  )                  )              ),                  SizedBox(width: 10,),                  InkWell(                    onTap: ()=>showFilterDialog(context),                    child: Container(                      width: 50,                      height: 50,                      decoration: BoxDecoration(                        color: AppColors.black,                        borderRadius: BorderRadius.circular(100),                      ),                      child: Center(                          child: Icon(Icons.filter_list_outlined, color: AppColors.white, size: 30,)                      ),                    ),                  )                ],              )          ),        )      ),      body: RefreshIndicator(          key: _refreshIndicatorKey,          color: Colors.white,          backgroundColor: Colors.blue,          strokeWidth: 4.0,          onRefresh: () async {            setState(() {});          },          child: Container(        width: size.width,        height: size.height,        padding: EdgeInsets.all(20),        child: SingleChildScrollView(          child: Column(            mainAxisAlignment: MainAxisAlignment.start,            crossAxisAlignment: CrossAxisAlignment.start,            children: [              _selectedRentType.isNotEmpty ? Row(                 mainAxisAlignment: MainAxisAlignment.spaceBetween,                 children: [                   Text("Filter apply : ${_selectedRentType ?? "All"}",                    style: TextStyle(                        fontSize: 14,                        fontWeight: FontWeight.w600,                        color: AppColors.black                    ),              ),                   IconButton(                     onPressed: (){                      setState(() {                        _selectedRentType = [];                      });                     },                     icon: Icon(Icons.close),                   )                 ],               ) : Center(),              AllCarHomeView(                view: "All",                searchValue: _searchValue,                // maxPrice: double.parse(_upperValue.toString()),                // minPrice: double.parse(_lowerValue.toString()),                rentTypeList: _selectedRentType,              )            ],          ),        ),      )),    );  }  showFilterDialog(BuildContext context) {    showModalBottomSheet(        shape: RoundedRectangleBorder(          borderRadius: BorderRadius.vertical(top: Radius.circular(30.0)),        ),        context: context,        builder: (context) {          return StatefulBuilder(              builder: (BuildContext context, StateSetter setState /*You can rename this!*/) {              return Container(                height: 400,                padding: const EdgeInsets.all(25.0),                child: ListView(                  children: [                    Text("Filter your vehicle",                      style: TextStyle(                          fontSize: 20,                          fontWeight: FontWeight.w600,                          color: AppColors.black                      ),                    ),                    SizedBox(height: 20,),                    ListTile(                      leading: Checkbox(                        value: _isDaily,                        onChanged: (v){},                      ),                      title: new Text('Dalily'),                      onTap: () {                        setState(() {                          _isDaily = !_isDaily;                          //check if the value is already in the list                          if(_selectedRentType.contains("Daily"))                            _selectedRentType.remove("Daily");                          else if(!_selectedRentType.contains("Daily"))                            _selectedRentType.add("Daily");                        });                      },                    ),                    ListTile(                      leading: Checkbox(                        value: _isWeekly,                        onChanged: (v){},                      ),                      title: new Text('Weekly'),                      onTap: () {                        setState(() {                          _isWeekly = !_isWeekly;                          //check if the value is already in the list                          if(_selectedRentType.contains("Weekly"))                            _selectedRentType.remove("Weekly");                          else if(!_selectedRentType.contains("Weekly"))                            _selectedRentType.add("Weekly");                        });                      },                    ),                    ListTile(                      leading: Checkbox(                        value: _isMonthly,                        onChanged: (v){},                      ),                      title: new Text('Monthly'),                      onTap: () {                        setState(() {                          _isMonthly = !_isMonthly;                          //check if the value is already in the list                          if(_selectedRentType.contains("Monthly"))                            _selectedRentType.remove("Monthly");                          else if(!_selectedRentType.contains("Monthly"))                            _selectedRentType.add("Monthly");                        });                      },                    ),                    ListTile(                      leading: Checkbox(                        value: _isYearly,                        onChanged: (v){},                      ),                      title: new Text('Yearly'),                      onTap: () {                        setState(() {                          _isYearly = !_isYearly;                          //check if the value is already in the list                          if(_selectedRentType.contains("Yearly"))                            _selectedRentType.remove("Yearly");                          else if(!_selectedRentType.contains("Yearly"))                            _selectedRentType.add("Yearly");                        });                      },                    ),                    SizedBox(height: 20,),                    // Text("Price Range",                    //   style: TextStyle(                    //       fontSize: 20,                    //       fontWeight: FontWeight.w600,                    //       color: AppColors.black                    //   ),                    // ),                    //SizedBox(height: 10,),                    // Row(                    //   children: [                    //     Expanded(                    //       child: TextFormField(                    //         controller: _minPriceController,                    //         keyboardType: TextInputType.number,                    //         decoration: InputDecoration(                    //           hintText: "Min Price",                    //           hintStyle: TextStyle(                    //               fontWeight: FontWeight.w400,                    //               color: Colors.grey,                    //               fontSize: 13                    //           ),                    //           fillColor: AppColors.white,                    //           filled: true,                    //           contentPadding: EdgeInsets.only(left: 10, right: 10),                    //           border: OutlineInputBorder(                    //               borderRadius: BorderRadius.circular(100),                    //               borderSide: BorderSide(width: 1, color: AppColors.grey200)                    //           ),                    //           enabledBorder: OutlineInputBorder(                    //               borderRadius: BorderRadius.circular(100),                    //               borderSide: BorderSide(width: 1, color: AppColors.grey200)                    //           ),                    //           focusedBorder: OutlineInputBorder(                    //               borderRadius: BorderRadius.circular(100),                    //               borderSide: BorderSide(width: 1, color: AppColors.grey200)                    //           ),                    //         ),                    //       ),                    //     ),                    //     SizedBox(width: 10,),                    //     Expanded(                    //       child: TextFormField(                    //         controller: _maxPriceController,                    //         keyboardType: TextInputType.number,                    //         decoration: InputDecoration(                    //           hintText: "Max Price",                    //           hintStyle: TextStyle(                    //               fontWeight: FontWeight.w400,                    //               color: Colors.grey,                    //               fontSize: 13                    //           ),                    //           fillColor: AppColors.white,                    //           filled: true,                    //           contentPadding: EdgeInsets.only(left: 10, right: 10),                    //           border: OutlineInputBorder(                    //               borderRadius: BorderRadius.circular(100),                    //               borderSide: BorderSide(width: 1, color: AppColors.grey200)                    //           ),                    //           enabledBorder: OutlineInputBorder(                    //               borderRadius: BorderRadius.circular(100),                    //               borderSide: BorderSide(width: 1, color: AppColors.grey200)                    //           ),                    //           focusedBorder: OutlineInputBorder(                    //               borderRadius: BorderRadius.circular(100),                    //               borderSide: BorderSide(width: 1, color: AppColors.grey200)                    //           ),                    //         ),                    //       ),                    //     ),                    //   ],                    // ),                    // RangeSliderFlutter(                    //   // key: Key('3343'),                    //   values: [_lowerValue, _upperValue],                    //   rangeSlider: true,                    //   tooltip: RangeSliderFlutterTooltip(                    //     alwaysShowTooltip: true,                    //   ),                    //   max: 2000,                    //   textPositionTop: -100,                    //   handlerHeight: 30,                    //   trackBar:RangeSliderFlutterTrackBar(                    //     activeTrackBarHeight: 10,                    //     inactiveTrackBarHeight: 10,                    //     activeTrackBar: BoxDecoration(                    //       borderRadius: BorderRadius.circular(10),                    //       color: Colors.red,                    //     ),                    //     inactiveTrackBar: BoxDecoration(                    //       borderRadius: BorderRadius.circular(10),                    //       color: Colors.grey,                    //     ),                    //   ),                    //                    //   min: 0,                    //   fontSize: 15,                    //   textBackgroundColor:Colors.red,                    //   onDragging: (handlerIndex, lowerValue, upperValue) {                    //     _lowerValue = lowerValue;                    //     _upperValue = upperValue;                    //     print("Lower Value: $lowerValue, Upper Value: $upperValue");                    //     setState(() {});                    //   },                    // ),                    // SizedBox(height: 20,),                    AppButton(text: "Filter", onClick: (){                      Navigator.pop(context);                      _filterCars();                    }),                    SizedBox(height: 20,),                  ],                ),              );            }          );        }        );  }  void _filterCars() {    setState(() {      _isWeekly = false;      _isMonthly = false;      _isYearly = false;      _isDaily = false;    });  }}