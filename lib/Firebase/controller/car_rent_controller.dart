import 'package:cloud_firestore/cloud_firestore.dart';import 'package:driver/Firebase/notification_controller.dart';import 'package:driver/notification/notification_controller.dart';import 'package:driver/view/verification_center/account_vefiy.dart';import 'package:driver/widgets/alert.dart';import 'package:driver/widgets/app_toast.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/material.dart';import 'package:intl/intl.dart';import '../../view/verification_center/email_verification.dart';import '../model/notiifcation_store_model.dart';class FirebaseCarRentController {  static final _auth = FirebaseAuth.instance;  static final _firestore = FirebaseFirestore.instance;  //send request to vendor  static Future<bool> sendRequest({required Map<String, dynamic> data, required BuildContext context})async{    try{      User? user = _auth.currentUser;      print("user: ${user!.email}");      int id = DateTime.now().millisecondsSinceEpoch;      int requestId = DateTime.now().millisecondsSinceEpoch-1000;      //check car id and user email is exist in drivers_send_request or not      //get driver profile first      DocumentSnapshot<Map<String, dynamic>> driverProfile = await _firestore.collection("drivers_profile").doc(user!.email).get();      print("driverProfile: ${driverProfile.data()}");      //now send request to vendor      if(driverProfile.exists) { //if driver profile exists        if (driverProfile.data()!["email_verify"] !=            "1") {          //if vendor email is not exists          AppToast(text: "You must need verify your email", color: Colors.red);          //show dilog          AppAler.showMyDialog(              message: "You must need verify your email",              context: context,              icon: Icons.sentiment_very_dissatisfied,             onClick: () {              Navigator.push(context, MaterialPageRoute(builder: (context) => EmailVerification(email: driverProfile.data()!["email"],)));            }               );          return false;        }         // else if (driverProfile.data()!["phone_verify"] !=        //     "1") { //if vendor phone is not exists        //   AppToast(text: "You must need verify your phone", color: Colors.red);        //   AppAler.showMyDialog(        //       message: "You must need verify your phone",        //       context: context,        //       icon: Icons.sentiment_very_dissatisfied,        //       onClick: () {        //         Navigator.push(context, MaterialPageRoute(builder: (context) => PhoneNum(email: driverProfile.data()!["email"],)));        //       }        //   );        //   return false;        // }        else if(driverProfile.data()!["account_verify"] != "1"){          AppToast(text: "You must need to Upload Your Documents", color: Colors.red);          AppAler.showMyDialog(              message: "You must need to Upload Your Documents",              context: context,              icon: Icons.sentiment_very_dissatisfied,              onClick: () {                Navigator.push(context, MaterialPageRoute(builder: (context) => AccountVerification()));              }          );          return false;        } else {          //send request to vendor          await _firestore.collection("drivers_send_request").add({            "id" : requestId.toString(),            "driver": driverProfile.data(), //driver info            "vendor": data["vendor_info"],            "car" : data,            "status": "pending",            "created_at": DateTime.now().millisecondsSinceEpoch.toString(),            "note_from_vendor": "",          });          ///TODO: send notification to vendor          ///TODO: send notification to driver         await NotificationController.sendNotification(              id: requestId.toString(),              title: "Your request has been send to this Vehicles Owner",              body: "Your request has been send to this Vehicles Owner. We will notify you when Owner approve.",              token: [driverProfile["device_token"]],              image: data["car_info"]["images"]["carImage"].toString(),              context: context          );         //store notification data into firebase          FirebaseNotificationController.sendNotificationData(              data: NotificationStoreModel(              id: requestId.toString(),              title: "Your request has been send to this Vehicles Owner",              driverMessages:"Your request has been send to this Vehicles Owner. We will notify you when Owner approve.",              driverEmail: driverProfile.data()!["email"],              vendorMessages: "New request from ${driverProfile.data()!["name"]} for your car ${data["car_info"]["car_name"]}",              vendorEmail: data["vendor_info"]["email"],              date: DateFormat("yyyy-MM-dd hh:mm:ss").format(DateTime.now()),                isRead: false          ).toJson());          ///TODO: send notification to admin          ///          //show a success message          AppAler.showMyDialog(message: "Your request has been send to this Vehicles Owner", context: context, onClick: () =>Navigator.pop(context)); //show a success message          return true;        }      }else{        AppToast(text: "You must need to complete your profile", color: Colors.red);        return false;      }    }catch(e){      return false;    }  }  //check sending request is exists or not  static Future<bool> checkRequestExists({required String carId, required String documentsId})async{    print("carId == $carId");    print("carId == $documentsId");    try{      DocumentSnapshot<Map<String, dynamic>> driverProfile = await _firestore.collection("drivers_profile").doc(_auth.currentUser!.email).get();      if(driverProfile.exists){        DocumentSnapshot<Map<String, dynamic>> querySnapshot = await _firestore.collection("drivers_send_request").doc(documentsId).get();          print("request id = ${querySnapshot.data()!["car"]["car_info"]["car_id"]}");          if(querySnapshot.data()!["car"]["car_info"]["car_id"] == carId) {            return true;          }else{            return false;          }      }else{        print("request id = ${driverProfile.data()}");        return false;      }    }catch(e){      print("error: $e");      return false;    }  }  //get notification data//search car  static Future<List<Map<String, dynamic>>> searchCar({required String carName})async{    try{      QuerySnapshot<Map<String, dynamic>> querySnapshot = await _firestore.collection("cars").where("car_info.car_name", isEqualTo: carName).get();      List<Map<String, dynamic>> list = [];      querySnapshot.docs.forEach((element) {        list.add(element.data());      });      return list;    }catch(e){      return [];    }  }  //get all cars  static Stream<QuerySnapshot<Map<String, dynamic>>> getMyCars(){    try{      return _firestore.collection("drivers_send_request").where("driver.email", isEqualTo: _auth.currentUser!.email).snapshots();    }catch(e){      return Stream.empty();    }  }  //get all car  static Stream getCarStream(){    return _firestore.collection("vendor_cars").snapshots();  }  //cancel request  static Future<bool> cancelRequest({required String requestId, required BuildContext context})async{    try{      await _firestore.collection("drivers_send_request").doc(requestId).delete();      AppAler.showMyDialog(message: "Your request has been canceled", context: context, onClick: () {        Navigator.pop(context);        Navigator.pop(context);        Navigator.pop(context);      }); //show a success message      return true;    }catch(e){      return false;    }  }}